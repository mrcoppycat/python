from django.db import models

class Student(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField(unique=True)

    def __str__(self):
        return f'{self.first_name} {self.last_name}'

class Course(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name

class Enrollment(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    enrolled_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('student', 'course')

    def __str__(self):
        return f'{self.student} enrolled in {self.course}'









        from django import forms
from .models import Student, Course, Enrollment

class StudentForm(forms.ModelForm):
    class Meta:
        model = Student
        fields = ['first_name', 'last_name', 'email']

class CourseForm(forms.ModelForm):
    class Meta:
        model = Course
        fields = ['name', 'description']

class EnrollmentForm(forms.ModelForm):
    student = forms.ModelChoiceField(
        queryset=Student.objects.all(), 
        empty_label="Select Student", 
        widget=forms.Select(attrs={'class': 'form-control'})
    )

    class Meta:
        model = Enrollment
        fields = ['student']











        from django.shortcuts import render, get_object_or_404, redirect
from .models import Student, Course, Enrollment
from .forms import StudentForm, CourseForm, EnrollmentForm

def course_list(request):
    courses = Course.objects.all()
    return render(request, 'courses/course_list.html', {'courses': courses})

def student_list(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    enrollments = Enrollment.objects.filter(course=course)
    return render(request, 'courses/student_list.html', {'course': course, 'enrollments': enrollments})

def enroll_student(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    if request.method == 'POST':
        form = EnrollmentForm(request.POST)
        if form.is_valid():
            enrollment = form.save(commit=False)
            enrollment.course = course
            enrollment.save()
            return redirect('student_list', course_id=course.id)
    else:
        form = EnrollmentForm()
    return render(request, 'courses/enroll_student.html', {'course': course, 'form': form})

def add_student(request):
    if request.method == 'POST':
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('course_list')
    else:
        form = StudentForm()
    return render(request, 'courses/add_student.html', {'form': form})

def add_course(request):
    if request.method == 'POST':
        form = CourseForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('course_list')
    else:
        form = CourseForm()
    return render(request, 'courses/add_course.html', {'form': form})








<!DOCTYPE html>
<html>
<head>
    <title>Course List</title>
</head>
<body>
    <h1>Course List</h1>
    <ul>
        {% for course in courses %}
            <li><a href="{% url 'student_list' course.id %}">{{ course.name }}</a></li>
        {% endfor %}
    </ul>
    <a href="{% url 'add_course' %}">Add a new course</a><br>
    <a href="{% url 'add_student' %}">Add a new student</a>
</body>
</html>










<!DOCTYPE html>
<html>
<head>
    <title>{{ course.name }} - Student List</title>
</head>
<body>
    <h1>Students Enrolled in {{ course.name }}</h1>
    <ul>
        {% for enrollment in enrollments %}
            <li>{{ enrollment.student }}</li>
        {% endfor %}
    </ul>
    <a href="{% url 'enroll_student' course.id %}">Enroll a new student</a><br>
    <a href="{% url 'course_list' %}">Back to Course List</a>
</body>
</html>










<!DOCTYPE html>
<html>
<head>
    <title>Enroll Student in {{ course.name }}</title>
</head>
<body>
    <h1>Enroll Student in {{ course.name }}</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Enroll</button>
    </form>
    <a href="{% url 'student_list' course.id %}">Back to Student List</a>
</body>
</html>






<!DOCTYPE html>
<html>
<head>
    <title>Add Course</title>
</head>
<body>
    <h1>Add Course</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Add Course</button>
    </form>
    <br>
    <a href="{% url 'course_list' %}">Back to Course List</a>
</body>
</html>










<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Course</title>
</head>
<body>
    <h1>Add Course</h1>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Add Course</button>
    </form>
    <br>
    <a href="{% url 'course_list' %}">Back to Course List</a>
</body>
</html>










from django.urls import path
from . import views

urlpatterns = [
    path('', views.course_list, name='course_list'),
    path('course/<int:course_id>/', views.student_list, name='student_list'),
    path('course/<int:course_id>/enroll/', views.enroll_student, name='enroll_student'),
    path('add_student/', views.add_student, name='add_student'),
    path('add_course/', views.add_course, name='add_course'),
]













from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),  # Directs '/admin/' URL to Django admin interface
    path('courses/', include('courses.urls')),  # Includes URLs from 'courses' app
]








from pathlib import Path

import os




INSTALLED_APPS = [
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
'courses',
]








TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]




    
